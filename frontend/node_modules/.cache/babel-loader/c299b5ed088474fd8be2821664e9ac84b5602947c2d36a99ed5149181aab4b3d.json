{"ast":null,"code":"var _jsxFileName = \"H:\\\\LionComposites\\\\frontend\\\\src\\\\AuthProvider.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nconst getUserIdFromToken = token => {\n  // Допустим, что токен имеет формат \"Bearer <токен>\". Мы разделаем строку по пробелу и возьмем вторую часть\n  const tokenParts = token.split(' ');\n  if (tokenParts.length === 2) {\n    const tokenValue = tokenParts[1];\n    // Допустим, что токен содержит информацию о пользователе в виде JSON объекта\n    const tokenData = JSON.parse(atob(tokenValue.split('.')[1]));\n    // Предположим, что в токене есть поле \"userId\", содержащее id пользователя\n    return tokenData.userId;\n  } else {\n    return null; // Возвращаем null, если формат токена неверный\n  }\n};\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  console.log('AuthProvider rendering');\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Функция для чтения токена из cookie\n  const getCookie = name => {\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) return parts.pop().split(';').shift();\n  };\n\n  // Проверка аутентификации при загрузке страницы\n  useEffect(() => {\n    const token = getCookie('auth_token');\n    if (token) {\n      // Здесь вы можете выполнить запрос к серверу для проверки валидности токена\n      // Например, вы можете отправить токен на сервер и получить информацию о пользователе\n      // Если токен действителен, извлеките id пользователя из токена и установите его в состояние\n      const userId = getUserIdFromToken(token); // Функция для извлечения id пользователя из токена\n      setUser({\n        isAuthenticated: true,\n        id: userId\n      });\n    }\n    setLoading(false);\n  }, []);\n  useEffect(() => {\n    console.log('User ID:', user ? user.id : 'Not authenticated');\n  }, [user]);\n\n  // Обновляем состояние пользователя при изменении\n  useEffect(() => {\n    console.log('User state updated:', user);\n  }, [user]);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      setUser\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"Yr74guu2eMMic1x5VyZGzAPjSGM=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","getUserIdFromToken","token","tokenParts","split","length","tokenValue","tokenData","JSON","parse","atob","userId","AuthProvider","children","_s2","console","log","user","setUser","loading","setLoading","getCookie","name","value","document","cookie","parts","pop","shift","isAuthenticated","id","fileName","_jsxFileName","lineNumber","columnNumber","Provider","_c","$RefreshReg$"],"sources":["H:/LionComposites/frontend/src/AuthProvider.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => useContext(AuthContext);\r\n\r\nconst getUserIdFromToken = (token) => {\r\n  // Допустим, что токен имеет формат \"Bearer <токен>\". Мы разделаем строку по пробелу и возьмем вторую часть\r\n  const tokenParts = token.split(' ');\r\n  if (tokenParts.length === 2) {\r\n    const tokenValue = tokenParts[1];\r\n    // Допустим, что токен содержит информацию о пользователе в виде JSON объекта\r\n    const tokenData = JSON.parse(atob(tokenValue.split('.')[1]));\r\n    // Предположим, что в токене есть поле \"userId\", содержащее id пользователя\r\n    return tokenData.userId;\r\n  } else {\r\n    return null; // Возвращаем null, если формат токена неверный\r\n  }\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n    console.log('AuthProvider rendering');\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Функция для чтения токена из cookie\r\n  const getCookie = (name) => {\r\n    const value = `; ${document.cookie}`;\r\n    const parts = value.split(`; ${name}=`);\r\n    if (parts.length === 2) return parts.pop().split(';').shift();\r\n  };\r\n\r\n  // Проверка аутентификации при загрузке страницы\r\n  useEffect(() => {\r\n  const token = getCookie('auth_token');\r\n  if (token) {\r\n    // Здесь вы можете выполнить запрос к серверу для проверки валидности токена\r\n    // Например, вы можете отправить токен на сервер и получить информацию о пользователе\r\n    // Если токен действителен, извлеките id пользователя из токена и установите его в состояние\r\n    const userId = getUserIdFromToken(token); // Функция для извлечения id пользователя из токена\r\n    setUser({ isAuthenticated: true, id: userId });\r\n  }\r\n  setLoading(false);\r\n}, []);\r\n\r\n  useEffect(() => {\r\n  console.log('User ID:', user ? user.id : 'Not authenticated');\r\n}, [user]);\r\n\r\n  // Обновляем состояние пользователя при изменении\r\n  useEffect(() => {\r\n    console.log('User state updated:', user);\r\n  }, [user]);\r\n\r\n  if (loading) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, setUser }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}